#################################################
#                                               #
#                   SETTINGS                    #
#                                               #
#################################################

settings:
  variables:
    translate_unknown: Desconhecido
    translate_idle: Inativo
    translate_home: Em casa
    translate_not_home: Fora de casa
    translate_available: Acessível
    translate_no_updates: Sem atualizações
    translate_update_available: Atualização disponível
    translate_updates_available: Atualizações disponíveis

#################################################
#                                               #
#                     BASE                      #
#                                               #
#################################################

base:
  template:
    - settings
    - tilt
    - extra_styles
  variables:
    state_on: >
      [[[ return ['on', 'home', 'cool', 'fan_only', 'playing', 'unlocked'].indexOf(entity === undefined || entity.state) !== -1; ]]]
    state: >
      [[[ return entity === undefined || entity.state; ]]]
    entity_id: >
      [[[ return entity === undefined || entity.entity_id; ]]]
    entity_picture: >
      [[[ return entity === undefined || entity.attributes.entity_picture; ]]]
    timeout: >
      [[[ return entity === undefined || Date.now() - Date.parse(entity.last_changed); ]]]
    tilt_options: >
      [[[
        let options = {
          max: 5,
          scale: 1.06,
          glare: true,
          'max-glare': 0.15,
          perspective: 800,
          speed: 800,
          parallax: '25px'
        }
        if (this._config.template.includes('conditional_media')) {
          options.scale = options.scale % parseInt(options.scale) / 2 + parseInt(options.scale);
          options.perspective = options.perspective * 2;
          return options;
        }
        return options;
      ]]]
  aspect_ratio: 1/1
  show_state: true
  show_icon: false
  state_display: >
    [[[ if (variables.state === true) return variables.translate_unknown; ]]]
  tap_action:
    action: toggle
    haptic: medium
  hold_action:
    haptic: success
  styles:
    grid:
      - grid-template-areas: |
          "icon  circle"
          "n     n"
          "s     s"
      - grid-template-columns: repeat(2, 1fr)
      - grid-template-rows: auto repeat(2, min-content)
      - gap: 1.3%
      - align-items: start
    name:
      - justify-self: start
      - line-height: 121%
    state:
      - justify-self: start
      - line-height: 188%
      - font-size: 14px
    card:
      - border-radius: var(--custom-button-card-border-radius)
      - -webkit-tap-highlight-color: rgba(0,0,0,0)
      - transition: none
      - padding: 11.5% 10.5% 10.5% 11.5%
      - --mdc-ripple-color: >
          [[[
            return variables.state_on
              ? 'rgb(0, 0, 0)'
              : 'rgba(255, 255, 255, 0.3)';
          ]]]
      - color: >
          [[[
            return variables.state_on
              ? 'rgba(0, 0, 0, 0.6)'
              : 'rgba(255, 255, 255, 0.3)';
          ]]]
      - background-color: >
          [[[
            return variables.state_on
              ? 'rgba(255, 255, 255, 0.8)'
              : 'rgba(115, 115, 115, 0.2)';
          ]]]

base_default:
  template:
    - settings
    - tilt
    - extra_styles
  variables:
    state_on: >
      [[[ return ['on', 'home', 'standby', 'Em espera'].indexOf(entity === undefined || entity.state) !== -1; ]]]
    state: >
      [[[ return entity === undefined || entity.state; ]]]
    entity_id: >
      [[[ return entity === undefined || entity.entity_id; ]]]
    media_on: >
      [[[ return entity === undefined || ['playing', 'paused'].indexOf(entity.state) !== -1; ]]]
    media_off: >
      [[[ return entity === undefined || ['off', 'idle', 'standby', 'unknown', 'unavailable'].indexOf(entity.state) !== -1; ]]]
    entity_picture: >
      [[[ return entity === undefined || entity.attributes.entity_picture; ]]]
    timeout: >
      [[[ return entity === undefined || Date.now() - Date.parse(entity.last_changed); ]]]
    tilt_options: >
      [[[
        let options = {
          max: 5,
          scale: 1.06,
          glare: true,
          'max-glare': 0.15,
          perspective: 800,
          speed: 800,
          parallax: '25px'
        }
        if (this._config.template.includes('conditional_media')) {
          options.scale = options.scale % parseInt(options.scale) / 2 + parseInt(options.scale);
          options.perspective = options.perspective * 2;
          return options;
        }
        return options;
      ]]]
  aspect_ratio: 1/1
  show_state: true
  show_icon: false
  state_display: >
    [[[ if (variables.state === true) return variables.translate_unknown; ]]]
  styles:
    grid:
      - grid-template-areas: |
          "icon  circle"
          "n     n"
          "s     s"
      - grid-template-columns: repeat(2, 1fr)
      - grid-template-rows: auto repeat(2, min-content)
      - gap: 1.3%
      - align-items: start
    name:
      - justify-self: start
      - line-height: 121%
    state:
      - justify-self: start
      - line-height: 188%
      - font-size: 14px
    card:
      - border-radius: var(--custom-button-card-border-radius)
      - -webkit-tap-highlight-color: rgba(0,0,0,0)
      - transition: none
      - padding: 11.5% 10.5% 10.5% 11.5%
      - --mdc-ripple-color: >
          [[[
            return variables.state_on
              ? 'rgb(0, 0, 0)'
              : 'rgba(255, 255, 255, 0.3)';
          ]]]
      - color: >
          [[[
            return variables.state_on
              ? 'rgba(0, 0, 0, 0.6)'
              : 'rgba(255, 255, 255, 0.3)';
          ]]]
      - background-color: >
          [[[
            return variables.state_on
              ? 'rgba(255, 255, 255, 0.8)'
              : 'rgba(115, 115, 115, 0.2)';
          ]]]

#################################################
#                                               #
#                 EXTRA STYLES                  #
#                                               #
#################################################

extra_styles:
  extra_styles: >
    [[[
      if (entity) {
        let hs = entity.attributes.hs_color === undefined,
          h = hs || entity.attributes.hs_color[0],
          s = hs || entity.attributes.hs_color[1],
          l_min = 28,
          l_max = 48,
          l_calc = entity.attributes.brightness / 2.54 * (l_max - l_min) / 100 + l_min;
        var light_color = entity.attributes.color_mode === 'color_temp' || entity.attributes.color_mode === 'brightness'
          ? `hsl(204, 58%, ${l_calc}%);`
          : `hsl(${h}, ${s}%, ${l_calc}%);`;
      }

      return `
        svg {
          --light-color:
          ${ variables.state_on && entity.attributes.brightness !== undefined
              ? light_color
              : variables.state_on && entity.attributes.brightness === undefined
                ? 'var(--state-icon-active-color);'
                : 'var(--state-icon-color);'
          }
        }
        #container {
          text-align: left !important;
        }
        #name, #state {
          font-size: 1.32vw;
          letter-spacing: -0.02vw;
        }
        #state::first-letter {
          text-transform: uppercase;
        }
        /* portrait */
        @media screen and (max-width: 1200px) {
          #name, #state {
            font-size: 2vw;
          }
        }
        /* phone */
        @media screen and (max-width: 800px) {
          #name, #state {
            font-size: 3vw;
          }
        }

        /* tilt */
        #ripple, .js-tilt-glare {
          clip-path: inset(0 round var(--custom-button-card-border-radius));
          overflow: hidden;
        }
        .js-tilt-glare {
          z-index: 1;
        }
        .js-tilt-glare-inner {
          background-color: rgba(0,0,0,0.9);
        }
        #container {
          transform: translateZ(${variables.tilt_options.parallax});
        }
        #card {
          transform-style: preserve-3d;
          overflow: visible;
        }

        ${this._config.template.includes('conditional_media') ? `
          :host {
            --blur-intensity: blur(4.5px) brightness(0.8);
          }
          /* phone */
          @media screen and (max-width: 800px) {
            :host {
              --blur-intensity: blur(2.5px) brightness(0.8);
            }
          }
          #ripple, .js-tilt-glare {
            clip-path: inset(0 round calc(var(--custom-button-card-border-radius) / 2));
          }
          #container {
            overflow: hidden;
          }
          .marquee {
            animation: marquee 20s linear infinite;
          }
          @keyframes marquee {
            from {
              transform: translateX(0%);
            }
            to {
              transform: translateX(-50%);
            }
          }
        `:''}

        ${this._config.template.includes('footer') ? `
          :host {
              --name-font-size: 1.0vw;
              --name-icon-size: 1.5vw;
              --notify-font-size: 0.9vw;
              --notify-box-size: 1.3vw;
              --name-padding-v: 0.4vw;
              --name-padding-h: 1.1vw;
              --card-border-radius: 0.6vw;
          }
          #ripple, .js-tilt-glare {
            border-radius: calc(var(--card-border-radius) - 0.1vw);
            clip-path: inset(0 round calc( var(--custom-button-card-border-radius) - 0.1vw ));
          }
          #name {
            font-size: var(--name-font-size);
            padding: var(--name-padding-v) var(--name-padding-h);
            letter-spacing: 0.012vw;
          }
          ha-icon {
            width: var(--name-icon-size);
            vertical-align: 7%;
            padding-right: 0.1vw;
            opacity: 0.4;
          }
          #card {
            border-radius: var(--card-border-radius);
            background: rgba(115, 115, 115, 0.04);
          }
          #notify {
            font-size: var(--notify-font-size);
            width: var(--notify-box-size);
            height: var(--notify-box-size);
            line-height: var(--notify-box-size);
            padding-right: 0.5px;
            padding-top: 0.5px;
          }
          /* portrait */
          @media screen and (max-width: 1200px) {
            #name {
              font-size: calc(var(--name-font-size) * 1.4);
              padding: calc(var(--name-padding-v) * 1.4) calc(var(--name-padding-h) * 1.4);
            }
            ha-icon {
              width: calc(var(--name-icon-size) * 1.4);
            }
            #card {
              border-radius: calc(var(--card-border-radius) * 1.4);
              margin: 0 0.5vw;
            }
            #notify {
              font-size: calc(var(--notify-font-size) * 1.4);
              width: calc(var(--notify-box-size) * 1.4);
              height: calc(var(--notify-box-size) * 1.4);
              line-height: calc(var(--notify-box-size) * 1.4);
            }
          }
          /* phone */
          @media screen and (max-width: 800px) {
            #name {
              font-size: calc(var(--name-font-size) * 2.7);
              padding: calc(var(--name-padding-v) * 2.7) calc(var(--name-padding-h) * 2.7);
              letter-spacing: 0.12vw;
            }
            ha-icon {
              width: calc(var(--name-icon-size) * 2.7);
            }
            #card {
              border-radius: calc(var(--card-border-radius) * 2.7);
              background: rgba(115, 115, 115, 0.08);
              margin: 0 0.5vw;
            }
            #notify {
              font-size: calc(var(--notify-font-size) * 2.7);
              width: calc(var(--notify-box-size) * 2.7);
              height: calc(var(--notify-box-size) * 2.7);
              line-height: calc(var(--notify-box-size) * 2.7);
              padding: 0;
            }
          }
        `:''}
      `
    ]]]

#################################################
#                                               #
#                    SIDEBAR                    #
#                                               #
#################################################

sidebar:
  show_state: false
  show_icon: false
  tap_action:
    action: none
  name: |
    [[[
      if (entity) {
        let attr = [];
        for (let [k, value] of Object.entries(entity.attributes))
          window.navigator.userAgent.match(/iPhone/i)
            ? k !== 'time' && k !== 'date' && value !== false && (attr += `<p>${k === 'greet' ? `<span class="iphone">${value}</span>` : `${value}`}</p>`)
            : value !== false && (attr += `<p>${value}</p>`);
        return attr;
      }
    ]]]
  extra_styles: |
    #card {
      padding: 0;
      font-family: SF Display, Roboto, system-ui;
    }
    #container {
      display: flex !important;
    }
    #name {
      padding: 1.8vw 2.5vw 0 var(--custom-layout-card-padding);
      white-space: normal;
      text-align: left;
    }
    .iphone {
      font-size: 1.5em;
      color: rgba(255, 255, 255, 0.8);
    }
    .time {
      font-size: var(--sidebar-time-font-size);
      font-weight: 200;
      line-height: var(--sidebar-time-line-height);
      letter-spacing: 0.11vw;
      margin-left: -0.3vw;
      color: rgba(255, 255, 255, 0.8);
    }
    .time-colon {
      position: relative;
      top: -.11em;
    }
    p {
      font-size: var(--sidebar-font-size);
      line-height: var(--sidebar-line-height);
      font-weight: 300;
      letter-spacing: 0.07vw;
      color: #6a7377;
    }
    b {
      font-weight: 700;
    }
    p > b {
      color: rgba(255, 255, 255, 0.8);
    }
    /* portrait */
    @media screen and (max-width: 1200px) {
      .time {
        font-size: calc(var(--sidebar-time-font-size) * 1.4 );
        line-height: calc(var(--sidebar-time-line-height) * 1.4 );
      }
      p {
        font-size: calc(var(--sidebar-font-size) * 1.4 );
        line-height: calc(var(--sidebar-line-height) * 1.4 );
      }
    }
    /* phone */
    @media screen and (max-width: 800px) {
      .time {
        font-size: calc(var(--sidebar-time-font-size) * 2.6 );
      }
      p {
        font-size: calc(var(--sidebar-font-size) * 2.6 );
        line-height: calc(var(--sidebar-line-height) * 2.6 );
        letter-spacing: 0.16vw;
      }
      #name {
        padding: 0 0 0 1vw;
      }
    }

#################################################
#                                               #
#                    FOOTER                     #
#                                               #
#################################################

footer:
  template:
    - settings
    - tilt
    - extra_styles
  variables:
    notify: >
      [[[
        return false;
      ]]]
    tilt_options: >
      [[[ return { max: 5, scale: 1.1, glare: true, 'max-glare': 0.07, perspective: 1000, speed: 800, parallax: '10px' }; ]]]
  size: 2vw
  show_icon: false
  color: "#9da0a2"
  custom_fields:
    notify: >
      [[[
        if (Number.isInteger(variables.notify)) {
          return variables.notify;
        } else if (variables.notify) {
          return `<span style="font-weight: 900;">!</span>`;
        }
      ]]]
  styles:
    card:
      - color: rgba(157,160,162, 0.55)
      - width: fit-content
      - border: 0.12vw solid rgba(58, 69, 73, 0.2)
      - transition: none
      - padding: 0 0 0.05vw 0
      - overflow: visible
      - --mdc-ripple-color: rgba(0, 0, 0, 0.8)
    custom_fields:
      notify:
        - display: >
            [[[
              if (Number.isInteger(variables.notify)) {
                return variables.notify > 0
                  ? 'initial'
                  : 'none';
              } else if (variables.notify) {
                return variables.notify
                  ? 'initial'
                  : 'none';
              }
            ]]]
        - position: absolute
        - top: -0.7vw
        - right: -0.6vw
        - font-weight: 700
        - color: "#d6d6d6"
        - background: "#8b3333"
        - border-radius: 50%
        - text-align: center
        - text-overflow: unset
        - z-index: 1
  hold_action:
    action: none
  tap_action:
    haptic: medium

#################################################
#                                               #
#                    CIRCLE                     #
#                                               #
#################################################

circle:
  custom_fields:
    circle: >
      [[[
        if (variables.state_on) {
          let input = variables.circle_input,
            radius = 20.5,
            circumference = radius * 2 * Math.PI;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                circle {
                  transform: rotate(-90deg);
                  transform-origin: 50% 50%;
                  stroke-dasharray: ${circumference};
                  stroke-dashoffset: ${circumference - input / 100 * circumference};
                }
                tspan {
                  font-size: 10px;
                }
              </style>
              <circle cx="25" cy="25" r="${radius}" stroke="#b2b2b2" stroke-width="1.5" fill="none" />
              <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}<tspan font-size="10">%</tspan></text>
            </svg>
          `;
        }
      ]]]
  styles:
    custom_fields:
      circle:
        - display: initial
        - width: 90%
        - margin: -6% -5% 0 0
        - justify-self: end
        - opacity: 1

#################################################
#                                               #
#                    LOADER                     #
#                                               #
#################################################

loader:
  custom_fields:
    loader: >
      <img src="/local/loader.svg" width="100%">
  tap_action:
    loader: >
      [[[
        if (entity) {
          let elt = this.shadowRoot,
            loader = (id, style, timeout) => {
              elt.getElementById(id) && (elt.getElementById(id).style.display = style,
                window.setTimeout(() => {
                  elt.getElementById('loader').style.display = 'none'
                }, 20000))
            };
          loader('circle', 'none', 'initial'),
          loader('loader', 'initial', 'none');
        }
      ]]]
  styles:
    custom_fields:
      loader:
        - display: none
        - top: -5.8%
        - right: -5.3%
        - width: 50%
        - position: absolute
        - opacity: 0.5
        - filter: >
            [[[ return variables.state_on ? 'none' : 'invert(1)'; ]]]

#################################################
#                                               #
#                     TILT                      #
#                                               #
#################################################

tilt:
  custom_fields:
    tilt: >
      [[[
        try {
          setTimeout(() => {
            let elt = this.shadowRoot,
              card = elt.getElementById('card'),
              ignore = window.navigator.userAgent;
            if (elt && card && !ignore.match(/iPhone/i) && !ignore.match(/Android/i)) {
              VanillaTilt.init(card, variables.tilt_options);
            }
          }, 50);
        }
        catch (e) {
        }
      ]]]

#################################################
#                                               #
#                    CLIMATE                    #
#                                               #
#################################################

climate:
  template:
    - circle
  custom_fields:
    circle: >
      [[[
        if (entity && entity.attributes.temperature && entity.attributes.current_temperature) {
          let input = variables.circle_input == null ? ' ' : `${parseInt(variables.circle_input)}<tspan font-size="10">°C</tspan>`,
            stroke_color = variables.state === 'cool' || variables.state === 'fan_only' ? '#b2b2b2' : 'none',
            fill_color = variables.state === 'off' ? 'rgba(255,255,255,0.04)' : 'none';
          return `
            <svg viewBox="0 0 50 50">
              <circle cx="25" cy="25" r="20.5" stroke="${stroke_color}" stroke-width="1.5" fill="${fill_color}" />
              <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}</text>
            </svg>
          `;
        }
      ]]]

#################################################
#                                               #
#                    UPDATER                    #
#                                               #
#################################################

updater:
  show_state: true
  show_name: false
  show_icon: false
  styles:
    state:
      - text-align: left
      - justify-self: left
      - white-space: normal
    card:
      - cursor: default
      - padding: 0.2em 0 0 0.6em
      - letter-spacing: var(--mdc-typography-body1-letter-spacing)
  tap_action:
    href:
  extra_styles: |
    #ripple {
      display: none;
    }
    ha-icon {
      width: 1.4em;
      vertical-align: 12%;
      opacity: 0.5;
      padding-right: 2px;
    }
    .title {
      font-size: 1.3em;
      font-weight: 500;
    }
    .subtitle {
      font-size: 0.95em;
      line-height: 0.7em;
      padding-left: 3px;
      padding-bottom: 10px;
      font-weight: 500;
      color: #828383;
    }
    a {
      color: var(--primary-color);
    }
    ul {
      margin-top: -0.6em;
      font-size: 0.88em;
      letter-spacing: 0.5px;
      line-height: 1.6em;
    }
    code {
      background-color: var(--secondary-background-color);
    }

updater_hass:
  template:
    - updater
    - settings
  state_display: |
    [[[
      if (entity) {

          let links = new RegExp('<a href="([^"]+)"', "g");
          let installed = entity.state;
          let hass_version_latest = states['sensor.hass_version_latest'];
          let hass_release_notes = states['sensor.hass_release_notes'];

          let latest = hass_version_latest.state;
          let release_notes = marked.parse(hass_release_notes.attributes.body);

          let subtitle = installed === latest
             ? `${variables.translate_no_updates} <b>&larr;</b> ${installed}`
             : `${ !installed.includes('.') || !latest.includes('.')
                 ? `${variables.translate_no_updates} <b>&larr;</b> ${installed}`
                 : `${installed} <b>&rarr;</b> ${latest} ${variables.translate_available} ${String.fromCodePoint("0x1f389")}`
               }`;
          
          let output = installed === latest
            ? '<ul></ul>'
            : `${ !installed.includes('.') || !latest.includes('.')
                ? '<ul></ul>'
                : release_notes.replace(links, '<a href="#" onclick="window.open(\'$1\')"')
              }`;

          return `
            <ha-icon icon="mdi:home-assistant"></ha-icon> <span class="title">Home Assistant</span><br>
            <p class="subtitle">${subtitle}</p>
            ${output}
          `;
      }
    ]]]

updater_hacs:
  template:
    - updater
    - settings
  state_display: |
    [[[
      if (entity) {

          let output = '',
              count = parseInt(entity.state) || 0,
              subtitle = count === 0
                  ? `${variables.translate_no_updates} <b>&larr;</b> ${states['update.home_assistant_supervisor_update'].attributes.installed_version || ''}`
                  : `${count} ${count === 1 ? variables.translate_update_available : variables.translate_updates_available} ${String.fromCodePoint('0x1f389')}`;

          Object.keys(states).forEach(key => {
            let s = states[key],
                e = s.entity_id,
                a = s.attributes;

            if (e.includes('update.home_assistant_supervisor_update') && s.state === 'on' && a.release_url) {
                let split_url = a.release_url.split('/'),
                    name = `${split_url[3]}/${split_url[4]}`,
                    installed = states['sensor.hacs_installed'].attributes.repositories;

                if (installed.includes(name)) {
                    output += `<li><b><a href="#" onclick="window.open('${a.release_url}');">
                    ${name}</a></b> ${a.installed_version} <b>&rarr;</b> ${a.latest_version}</li>`
                }
            }
          });

          return `
            <ha-icon icon="hacs:hacs"></ha-icon> <span class="title">Community Store</span><br>
            <p class="subtitle">${subtitle}</p>
            <ul>${output}</ul>
          `;
      }
    ]]]

updater_other:
  template:
    - updater
    - settings
  state_display: |
    [[[
      if (entity) {
        let output = '';
        let attr = Object.fromEntries(
          Object.entries(entity.attributes).filter(([, value]) => {
            return value != false;
          })
        );
        let count = Object.keys(attr).length;
        for (const [, value] of Object.entries(attr)) {
          output += `<li>${value}</li>`;
        }
        let subtitle = count == 0
          ? variables.translate_no_updates
          : `${count} ${count == 1 ? variables.translate_update_available : variables.translate_updates_available} ${String.fromCodePoint('0x1f389')}`;
        return `
          <ha-icon icon="mdi:update"></ha-icon> <span class="title">Outro</span><br>
          <p class="subtitle">${subtitle}</p>
          <ul>${output}</ul>
        `;
      }
    ]]]

hacs_iframe:
  tap_action:
    action: fire-dom-event
    browser_mod:
      command: popup
      title: HACS
      style:
        div: |
          .content {
            padding: 0;
          }
        hui-iframe-card$: |
          ha-card {
            margin-left: -58px;
          }
      large: true
      card:
        type: iframe
        url: >
          [[[ return `/${hass.panels.hacs.url_path}` ]]]
  template: icon_name

hacs_navigate_ios:
  tap_action:
    close_popup: >
      [[[ hass.callService('browser_mod', 'close_popup'); ]]]
    action: navigate
    navigation_path: >
      [[[ return `/${hass.panels.hacs.url_path}` ]]]
  template: icon_name

#################################################
#                                               #
#                     LIGHT                     #
#                                               #
#################################################

light:
  template:
    - base
    - circle
    - loader
  variables:
    circle_input: >
      [[[ return entity === undefined || Math.round(entity.attributes.brightness / 2.54); ]]]
  hold_action:
    action: fire-dom-event
    browser_mod:
      command: popup
      title: >
        [[[ return entity === undefined || entity.attributes.friendly_name; ]]]
      card:
        type: custom:light-popup-card
        entity: >
          [[[ return variables.entity_id; ]]]
        icon: none
        fullscreen: false
        brightnessWidth: 130px
        brightnessHeight: 360px
        borderRadius: 1.7em
        sliderColor: "#c7c7c7"
        sliderTrackColor: rgba(25, 25, 25, 0.9)
        displayType: slider
        actionSize: 4.5em
        actionsInARow: 2
        actions:
          - action: call-service
            service: light.turn_on
            color: "#d8d9e1"
            service_data:
              entity_id: >
                [[[ return variables.entity_id; ]]]
              color_temp: 153
          - action: call-service
            service: light.turn_on
            color: "#d5b08d"
            service_data:
              entity_id: >
                [[[ return variables.entity_id; ]]]
              color_temp: 326
          - action: call-service
            service: light.turn_on
            color: "#ce944b"
            service_data:
              entity_id: >
                [[[ return variables.entity_id; ]]]
              color_temp: 500
          - action: fire-dom-event
            image: >-
              data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 
              50 50"%3E%3Cstyle%3Esvg%7Bbackground:radial-gradient(circle,rgba(255,255,
              255,1) 0%25,rgba(255,255,255,0) 80%25),conic-gradient(%237827e6,%23e622e7,
              %23e40588,%23e41919,%23e5691e,%23e8e22e,%237de629,%2334e828,%2333e75c,
              %2334e8e0,%23207de5,%231227e5,%237827e6)%7D%3C/style%3E%3C/svg%3E
            browser_mod:
              command: popup
              title: >
                [[[ return entity === undefined || entity.attributes.friendly_name; ]]]
              card:
                type: custom:light-entity-card
                entity: >
                  [[[ return variables.entity_id; ]]]
                brightness: true
                color_temp: true
                white_value: true
                full_width_sliders: false
                hide_header: true
                show_slider_percent: true
                smooth_color_wheel: true
                persist_features: true
                consolidate_entities: true

#################################################
#                                               #
#                    PERSON                     #
#                                               #
#################################################

person:
  template:
    - base
    - circle
  state_display: >
    [[[
      if (entity) {
        return variables.state === 'home'
          ? variables.translate_home
          : variables.state === 'not_home'
            ? variables.translate_not_home
            : variables.state;
      }
      return variables.translate_unknown;
    ]]]
  triggers_update: sensor.time
  hold_action:
    action: none
  styles:
    custom_fields:
      icon:
        - clip-path: circle()
        - width: 79%
        - pointer-events: none
        - display: grid
  custom_fields:
    icon: >
      [[[
        return entity && variables.entity_picture
          ? `<img src="${variables.entity_picture}" width="100%">`
          : null;
      ]]]
    circle: >
      [[[
        if (entity) {
          let time = c => {
            let s = (c/1e3), m = (c/6e4), h = (c/36e5), d = (c/864e5);
            return s < 60 ? parseInt(s) + 's' : m < 60 ? parseInt(m) + 'm' : h < 24 ? parseInt(h) + 'h' : parseInt(d) + 'd';
          },
           last_changed = states[variables.retain] == null || states[variables.retain].state == 'unavailable' || states[variables.retain].state == 'unknown'
            ? time(Date.now() - Date.parse(entity.last_changed))
            : time(Date.now() - Date.parse(states[variables.retain].state)),
          stroke = variables.state === 'home'
            ? '#b2b2b2'
            : 'none',
          fill = variables.state !== 'home'
            ? 'rgba(255,255,255,0.04)'
            : 'none';
          return `
            <svg viewBox="0 0 50 50">
              <circle cx="25" cy="25" r="20.5" stroke="${stroke}" stroke-width="1.5" fill="${fill}" />
              <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${last_changed}</text>
            </svg>
          `;
        }
      ]]]

#################################################
#                                               #
#                 COMPUTER LOCK                 #
#                                               #
#################################################

lock:
  tap_action:
    action: >
      [[[ 
        if (variables.lock === 'locked') {
          return 'none';
        } else {
          return 'toggle'
        }
      ]]]
    loader: |
      [[[
        let elt = this.shadowRoot;
        if (variables.state_on && variables.lock === 'locked') {
          elt.getElementById('lock').classList.add('locked');
          window.setTimeout(() => {
            elt.getElementById('lock').classList.remove('locked');
          }, 1100);
        } else {
          // duplicate of "loader" template
          let loader = (id, style, timeout) => {
              elt.getElementById(id) && (elt.getElementById(id).style.display = style,
                window.setTimeout(() => {
                  elt.getElementById('loader').style.display = 'none'
                }, 20000))
          };
          loader('circle', 'none', 'initial'),
          loader('loader', 'initial', 'none');
        }
      ]]]
  custom_fields:
    circle: >
      [[[
        if (variables.lock === 'locked') {
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes locked {
                  from,
                  to {
                    transform: translateX(0);
                  }
                  10%,
                  30%,
                  50%,
                  70%,
                  90% {
                    transform: translateX(-8%);
                  }
                  20%,
                  40%,
                  60%,
                  80% {
                    transform: translateX(8%);
                  }
                }
                .locked {
                  animation: locked 1.1s;
                }
              </style>
              <path id="lock" class="locked" d="M8.2 22.6h2.4v-7.2C10.6 7.5 17.1 1 25 1s14.4 6.4 14.4 14.4v7.2h2.4V49H8.2m26.4-26.4v-7.2c0-5.3-4.3-9.6-9.6-9.6s-9.6 4.3-9.6 9.6v7.2"/>
            </svg>
          `;
        } 
        if (variables.state_on) {
          let input = variables.circle_input,
            radius = 20.5,
            circumference = radius * 2 * Math.PI;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                circle {
                  transform: rotate(-90deg);
                  transform-origin: 50% 50%;
                  stroke-dasharray: ${circumference};
                  stroke-dashoffset: ${circumference - input / 100 * circumference};
                }
                tspan {
                  font-size: 10px;
                }
              </style>
              <circle cx="25" cy="25" r="${radius}" stroke="#b2b2b2" stroke-width="1.5" fill="none" />
              <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}<tspan font-size="10">%</tspan></text>
            </svg>
          `;
        }
      ]]]
  styles:
    custom_fields:
      circle:
        - width: 45%
        - fill: var(--state-icon-color)
        - margin: 1% 2% 0 0
        - justify-self: end
        - opacity: 1
        - display: grid

#################################################
#                                               #
#                 POPUP BUTTONS                 #
#                                               #
#################################################

icon_name:
  size: 1.4em
  color: "#9da0a2"
  styles:
    grid:
      - grid-template-areas: '"i n"'
      - grid-column-gap: 0.3em
    card:
      - color: "#9da0a2"
      - border-radius: 0.6em
      - padding: 1em 1.4em 1em 1.2em
      - width: max-content
      - font-size: 1.06em
      - font-weight: 500
      - letter-spacing: 0.015em
      - background: "#FFFFFF10"

icon_only:
  show_name: false
  color: "#9da0a2"
  styles:
    card:
      - color: "#9da0a2"
      - border-radius: 0.6em
      - width: 4em
      - height: 3.7em
      - background: "#FFFFFF10"

#################################################
#                                               #
#                     ICONS                     #
#                                               #
#################################################

icon_hue:
  styles:
    custom_fields:
      icon:
        - width: 77%
        - margin-left: -14%
        - margin-top: 1%
  custom_fields:
    icon: >
      [[[
        let state = variables.state_on && variables.timeout < 2000 ? 'on' : null;
        return `
          <svg viewBox="0 0 50 50">
            <style>
              @keyframes on {
                0% {
                  transform: scale(0.85);
                }
                20% {
                  transform: scale(1.1);
                }
                40% {
                  transform: scale(0.95);
                }
                60% {
                  transform: scale(1.03);
                }
                80% {
                  transform: scale(0.97);
                }
                100% {
                  transform: scale(1);
                }
              }
              .on {
                animation: on 0.8s;
                transform-origin: center;
              }
            </style>
            <path fill="#9da0a2" d="M27.4 47.3h-4.9s-.7.1-.7.8.4.9.7.9h4.9c.3 0 .7-.1.7-.9s-.7-.8-.7-.8zm3.3-2.9H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9-.1-.8-.9-.8-.9-.8zm0-3H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9-.1-.8-.9-.8-.9-.8zm0-2.9H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9s-.9-.8-.9-.8zm5.2-23.2c-3.3-5.3-7-5.6-10.9-5.6-3.8 0-8.4.4-10.9 5.6-.1.1-.1.3.1.7.4.8 3.3 7.2 3.2 18.8 0 1.1-.1 1.6 0 1.7 0 .1 0 .7 1.1.7h13c1 0 1-.5 1.1-.7v-1.7c-.1-11.6 2.8-18 3.2-18.8.1-.4.1-.5.1-.7"/>
            <path class="${state}" fill="var(--light-color)" d="M14.1 15.3c3.4-.3 7-.4 10.9-.4 3.8 0 7.5.2 10.9.4.4-.4.7-.8.9-1.1C39 8.5 38.9 6.5 38.9 6c-.2-4.4-8.4-5-12.1-5h0-3.4c-3.7 0-12 .5-12.1 5 0 .5-.1 2.5 2.1 8.2 0 .3.3.8.7 1.1z"/>
          </svg>
        `;
      ]]]

icon_shade:
  styles:
    custom_fields:
      icon:
        - width: 77%
        - margin-left: -15%
        - margin-top: 1%
  custom_fields:
    icon: >
      [[[
        let state = variables.state_on && variables.timeout < 2000 ? 'on' : null;
        return `
          <svg viewBox="0 0 50 50">
            <style>
              @keyframes on {
                0% {
                  transform: scale(0.85);
                }
                20% {
                  transform: scale(1.1);
                }
                40% {
                  transform: scale(0.95);
                }
                60% {
                  transform: scale(1.03);
                }
                80% {
                  transform: scale(0.97);
                }
                100% {
                  transform: scale(1);
                }
              }
              .on {
                animation: on 0.8s;
                transform-origin: center;
              }
            </style>
            <path fill="#9da0a2" d="M26.4 25.6c.6-.3 1.1-.7 1.1-1.3L25 17.9l-2.5 6.4c0 .7.6 1.1 1.1 1.3v20.8h-5.5v2.7h13.7v-2.7h-5.5V25.6z"/>
            <path class="${state}" fill="var(--light-color)" d="M24.6.9l-9.4.5c-.6.1-1.9 0-2.5 2.1s-2.4 9.1-4 16.9c-.2.7-.5 2-.5 2.3s-.4 1.6.9 1.6c.8.1 7.4.3 15.9.3 8.6 0 15.1-.3 15.9-.3 1.3-.1.9-1.3.9-1.6s-.3-1.6-.5-2.3c-1.6-7.8-3.4-14.8-4-16.9s-1.9-2-2.5-2.1c-1.6-.2-6.9-.4-9.4-.5"/>
          </svg>
        `;
      ]]]

icon_tv:
  styles:
    custom_fields:
      icon:
        - width: 87%
        - margin-top: -8%
        - fill: >
            [[[
              return variables.state_on ? '#616161' : '#9da0a2';
            ]]]
  custom_fields:
    icon: >
      [[[
        let style = `
          <style>
            @keyframes on {
              from {
                transform: scaleY(0);
              }
              to {
                transform: scaleY(1);
              }
            }
            .on {
              animation: on 1s;
              transform-origin: -100% 46%;
              animation-fill-mode: forwards;
            }
            @keyframes off {
              from {
                transform: scaleY(1);
              }
              to {
                transform: scaleY(0);
              }
            }
            .off {
              animation: off 1s;
              transform-origin: -100% 46%;
              animation-fill-mode: forwards;
            }
          </style>
        `,
          path = `
            <path d="M46 9.2v27.5H4.1V9.2H46m2.4-2.4H1.6v32.3h46.7c.1 0 .1-32.3.1-32.3zM11.9 43.2h26.3c.6 0 1.1-.4 1.1-1v-.3c0-.6-.4-1.1-1-1.1H11.9c-.6 0-1.1.4-1.1 1v.3a1.11 1.11 0 0 0 1.1 1.1z"/>
          `,
          gradient = `
            <linearGradient id="A" gradientUnits="userSpaceOnUse" x1="5.401" y1="34.714" x2="43.817" y2="11.74">
              <stop offset="0" stop-color="#64acb7"/>
              <stop offset="1" stop-color="#7fdbe9"/>
            </linearGradient>
          `;
        if (variables.state_on && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50"> ${style} ${gradient} 
              <path d="M2.9,8h44.3v29.9H2.9V8z" fill="#20262890"/>
              <path class="on" d="M2.9,8h44.3v29.9H2.9V8z" fill="url(#A)"/> ${path} 
            </svg>
          `;
        }
        if (variables.state_on && variables.timeout > 2000) {
          return `
            <svg viewBox="0 0 50 50"> ${gradient} 
              <path d="M2.9,8h44.3v29.9H2.9V8z" fill="#20262890"/>
              <path class="on" d="M2.9,8h44.3v29.9H2.9V8z" fill="url(#A)"/> ${path} 
            </svg>
          `;
        }
        if (variables.state === 'off' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50"> ${style} ${gradient} 
              <path class="off" d="M2.9,8h44.3v29.9H2.9V8z" fill="url(#A)"/> ${path} 
            </svg>
          `;
        } else {
          return `
            <svg viewBox="0 0 50 50"> ${style} 
              ${path}
            </svg>
          `;
        }
      ]]]

icon_spot:
  styles:
    custom_fields:
      icon:
        - width: 74%
        - margin-left: -8%
        - margin-top: 3%
  custom_fields:
    icon: >
      [[[
        let state;
        if (variables.state_on && variables.timeout < 2000) {
          state = 'on';
        } 
        if (variables.state === 'off' && variables.timeout < 2000) {
          state = 'off';
        }
        if (variables.state_on && variables.timeout > 2000) {
          state = 'on_timeout';
        }
        return `
          <svg viewBox="0 0 50 50">
            <style>
              @keyframes on {
                0% {
                  transform: rotateZ(0deg);
                  animation-timing-function: cubic-bezier(0.7, 0, 0.84, 0);
                }
                70% {
                  transform: rotateZ(-15deg);
                  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                }
                75% {
                  transform: rotateZ(-15deg);
                  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                }
                88% {
                  transform: rotateZ(-11deg);
                }
                100% {
                  transform: rotateZ(-15deg);
                }
              }
              @keyframes off {
                0% {
                  transform: rotateZ(-15deg);
                  animation-timing-function: cubic-bezier(0.7, 0, 0.84, 0);
                }
                70% {
                  transform: rotateZ(0deg);
                  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                }
                75% {
                  transform: rotateZ(0deg);
                  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                }
                88% {
                  transform: rotateZ(-4deg);
                }
                100% {
                  transform: rotateZ(0deg);
                }
              }
              .on {
                animation: on 0.7s;
                transform-origin: 40% 20%;
                animation-fill-mode: forwards;
                animation-delay: -0.1s;
              }
              .off {
                animation: off 0.7s;
                transform-origin: 40% 20%;
                animation-fill-mode: forwards;
              }
              .on_timeout {
                transform: rotateZ(-15deg);
                transform-origin: 40% 20%;
              }
            </style>
            <path style="clip-path: url(#mask);" fill="#9da0a2" d="M40.5.8H17.1c-.1 0-.1 0-.1.1A3.12 3.12 0 0 0 20.1 4h6.1c.1 0 .1 0 .1.1v7.4L18 19.1l3.6 3.5 9.1-8.6c.4-.4.6-1 .7-1.6V4c0-.1 0-.1.1-.1h6c1.7.1 3.1-1.3 3-3.1z"/>
            <defs>
              <clipPath id="mask">
                <path class="${state}" d="M0 9.1h24l8.3 8.8H50V-9H0z"/>
              </clipPath>
            </defs>
            <path class="${state}" fill="var(--light-color)" d="M25.5 46.4s1.4.5 10.4-8.2c.5-.4 6.3-6.3 5.8-7.1-.7-.8-18.6-19.5-18.6-19.5s-.6-.9-8.6 6.4c-.6.5-8.7 8-7.7 9.1l18.7 19.3z"/>
          </svg>
        `;
      ]]]

icon_imac:
  styles:
    custom_fields:
      icon:
        - width: 80%
        - margin-left: 1%
        - margin-top: -5%
        - fill: >
            [[[ return variables.state_on ? '#72757c' : '#9da0a2'; ]]]
  custom_fields:
    icon: >
      [[[
        let state = variables.state_on && variables.timeout < 2000 ? 'on' : null;
        return `
          <svg viewBox="0 0 50 50">
            <style>
              @keyframes on {
                from {
                  opacity: 0.5;
                  transform: scale(0.6);
                }
                100% {
                  opacity: 1;
                }
              }
              .on {
                animation: on 0.8s cubic-bezier(0.25, 1, 0.5, 1);
                transform-origin: center;
              }
            </style>
            <path class="${state}" d="M31.9 44.5c-1-.3-1.9.4-1.9-3.7h-9.9c0 4.2-.9 3.4-1.9 3.7s-.2.7-.2.7h14.1s.8-.3-.2-.7zM47.6 4.8H2.5c-1.1 0-2 .9-2 2v30.1c0 1.1.9 2 2 2h45c1.1 0 2-.9 2-2v-30a1.95 1.95 0 0 0-1.9-2.1zm-.7 26.4H3.2V7.6H47v23.6z"/>
          </svg>
        `;
      ]]]

icon_monitors:
  styles:
    custom_fields:
      icon:
        - width: 73%
        - margin-left: -9%
  custom_fields:
    icon: >
      [[[
        let style = `
          <style>
            @keyframes cone {
              35% {
                transform: scale(0.8);
                animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
              }
              36% {
                transform: translateY(0%);
              }
              49% {
                transform: scale(1.25);
              }
              63% {
                transform: scale(0.85);
                animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
              }
              77% {
                transform: scale(1.15);
                animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
              }
              95% {
                transform: scale(1);
              }
            }
            .cone {
              animation: cone 1.2s;
              transform-origin: center;
            }
            @keyframes speaker {
              0% {
                transform: scale(1);
              }
              40% {
                transform: scale(1);
              }
              49% {
                transform: scale(0.95);
              }
              63% {
                transform: scale(1);
              }
              77% {
                transform: scale(0.95);
              }
              100% {
                transform: scale(1);
              }
            }
            .speaker {
              animation: speaker 1.3s;
              transform-origin: center;
            }
          </style>
        `,
          paths = `
            <g class="speaker">
              <path fill="#686868" d="M35.8 46.9H14.2c-1.1 0-2-1-2-2.3V6.7c0-1.3.9-2.3 2-2.3h21.5c1.1 0 2 1 2 2.3v37.9c0 1.2-.9 2.3-1.9 2.3z"/>
              <path fill="#2a2a2a" d="M39.2 1H10.8C9.4 1 8.3 2.1 8.2 3.5v42.9a2.65 2.65 0 0 0 2.6 2.6h28.3c1.4 0 2.5-1.2 2.6-2.6V3.5c0-1.4-1.1-2.5-2.5-2.5zM25 7c1.3 0 2.4 1.1 2.4 2.4s-1.1 2.4-2.4 2.4-2.4-1.1-2.4-2.4C22.5 8 23.6 7 25 7zm10.2 35.5l-.4 1.9s-.2.6-.6.6H15.8c-.4 0-.6-.6-.6-.6s-.1-1.1-.4-1.9.6-.9.6-.9h19.3c0-.1.8-.1.5.9z"/>
            </g>
            <path class="cone" fill="#e5dd00" d="M25 15.7c-6.2 0-11.3 5.1-11.3 11.3S18.8 38.3 25 38.3 36.3 33.2 36.3 27c-.1-6.3-5.1-11.3-11.3-11.3zm0 14.5a3.33 3.33 0 0 1-3.3-3.3 3.33 3.33 0 0 1 3.3-3.3 3.33 3.33 0 0 1 3.3 3.3c-.1 1.9-1.5 3.3-3.3 3.3z"/>
          `;
        if (variables.state_on && variables.timeout < 2000) {
        return `
          <svg viewBox="0 0 50 50">
            ${style}
            ${paths}
          </svg>
        `;
        }

        return variables.state_on && variables.timeout > 2000 ? `
          <svg viewBox="0 0 50 50">
            ${paths}
          </svg>
        ` : `
          <svg viewBox="0 0 50 50">
            <path fill="#9da0a2" d="M25 18.6c-4.6 0-8.4 3.8-8.4 8.4s3.8 8.4 8.4 8.4 8.4-3.8 8.4-8.4-3.7-8.4-8.4-8.4zm0 11.7a3.33 3.33 0 0 1-3.3-3.3 3.33 3.33 0 0 1 3.3-3.3 3.33 3.33 0 0 1 3.3 3.3c0 1.8-1.4 3.3-3.3 3.3zM39.2 1H10.9C9.4 1 8.3 2.1 8.3 3.6v42.9a2.65 2.65 0 0 0 2.6 2.6h28.3a2.65 2.65 0 0 0 2.6-2.6v-43C41.7 2 40.5.9 39.2 1zM25 7c1.3 0 2.4 1.1 2.4 2.4s-1.1 2.4-2.4 2.4-2.4-1.1-2.4-2.4S23.7 7 25 7zm10.3 35.5l-.4 1.9s-.2.6-.6.6H15.8c-.4 0-.6-.6-.6-.6l-.4-1.9c-.2-.9.6-.9.6-.9h19.3s.9.1.6.9zM25 38.2c-6.2 0-11.3-5.1-11.3-11.3a11.29 11.29 0 1 1 22.6 0c.1 6.3-5 11.3-11.3 11.3z"/>
          </svg>
        `;
      ]]]

icon_alexa:
  styles:
    custom_fields:
      icon:
        - width: 85%
        - margin-top: 7px
  custom_fields:
    icon: >
      [[[
        if (variables.state_on && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 88 51">
              <g id="Alexa">
                <path id="Top" fill-rule="evenodd" clip-rule="evenodd" d="M84.0275 6.94174C84.0275 10.7756 66.0842 13.8835 43.95 13.8835C21.8158 13.8835 3.87256 10.7756 3.87256 6.94174C3.87256 3.10792 21.8158 0 43.95 0C66.0842 0 84.0275 3.10792 84.0275 6.94174ZM31.5718 4.65054C31.5718 5.44374 29.0916 6.08676 26.0321 6.08676C22.9726 6.08676 20.4924 5.44374 20.4924 4.65054C20.4924 3.85733 22.9726 3.21431 26.0321 3.21431C29.0916 3.21431 31.5718 3.85733 31.5718 4.65054ZM43.8816 10.8743C46.9411 10.8743 49.4214 10.2313 49.4214 9.43808C49.4214 8.64488 46.9411 8.00186 43.8816 8.00186C40.8221 8.00186 38.3419 8.64488 38.3419 9.43808C38.3419 10.2313 40.8221 10.8743 43.8816 10.8743ZM49.4214 3.28255C49.4214 4.07575 46.9411 4.71877 43.8816 4.71877C40.8221 4.71877 38.3419 4.07575 38.3419 3.28255C38.3419 2.48935 40.8221 1.84633 43.8816 1.84633C46.9411 1.84633 49.4214 2.48935 49.4214 3.28255ZM61.732 6.08676C64.7915 6.08676 67.2717 5.44374 67.2717 4.65054C67.2717 3.85733 64.7915 3.21431 61.732 3.21431C58.6725 3.21431 56.1923 3.85733 56.1923 4.65054C56.1923 5.44374 58.6725 6.08676 61.732 6.08676Z" fill="#9da0a2"/>
                <path id="Body" fill-rule="evenodd" clip-rule="evenodd" d="M85.8864 8.03538C85.8528 8.00351 85.8103 7.97236 85.7591 7.94189C86.1595 8.45023 86.368 8.97274 86.368 9.50579C86.368 14.6 67.3223 18.7305 43.8139 18.7386V50.4039C56.897 50.4039 82.8704 48.9609 87.057 35.6656C87.3554 34.8677 87.9453 32.3623 87.9177 28.7238C87.8902 25.0854 87.9063 18.4309 87.9177 15.5584C87.9866 13.7575 87.6767 9.73149 85.8864 8.03538ZM2.02619 8.03532C2.05949 8.00355 2.10158 7.97249 2.1522 7.94211C1.75467 8.45036 1.54761 8.97278 1.54761 9.50574C1.54761 14.5999 20.4643 18.7305 43.8134 18.7386V50.4039C30.819 50.4039 5.02174 48.9608 0.863528 35.6655C0.567165 34.8676 -0.0187228 32.3622 0.0086338 28.7238C0.0359904 25.0853 0.0200324 18.4308 0.0086338 15.5584C-0.0597574 13.7574 0.248005 9.73143 2.02619 8.03532Z" fill="#9da0a2"/>
                <path id="led" fill-rule="evenodd" clip-rule="evenodd" d="M84.9147 10.6006C85.7362 9.7512 86.0838 8.26345 84.4182 6.76855C84.5404 7.01218 84.6028 7.25907 84.6028 7.50872C84.6028 11.7822 66.2925 15.2495 43.6557 15.2741V15.2743C21.3333 15.2462 3.2831 11.7803 3.2831 7.50895C3.2831 7.25991 3.34447 7.0136 3.46447 6.77055C1.82198 8.26513 2.16506 9.75244 2.9755 10.6017C8.44055 15.9276 29.9934 17.4051 43.6901 17.3707V17.3698C57.5717 17.4016 79.3812 15.9221 84.9147 10.6006Z" fill="#9da0a2"/>
              </g>
            </svg>
          `
        }

        return `
          <svg viewBox="0 0 88 51">
            <g id="Alexa">
              <path id="Top" fill-rule="evenodd" clip-rule="evenodd" d="M84.0275 6.94174C84.0275 10.7756 66.0842 13.8835 43.95 13.8835C21.8158 13.8835 3.87256 10.7756 3.87256 6.94174C3.87256 3.10792 21.8158 0 43.95 0C66.0842 0 84.0275 3.10792 84.0275 6.94174ZM31.5718 4.65054C31.5718 5.44374 29.0916 6.08676 26.0321 6.08676C22.9726 6.08676 20.4924 5.44374 20.4924 4.65054C20.4924 3.85733 22.9726 3.21431 26.0321 3.21431C29.0916 3.21431 31.5718 3.85733 31.5718 4.65054ZM43.8816 10.8743C46.9411 10.8743 49.4214 10.2313 49.4214 9.43808C49.4214 8.64488 46.9411 8.00186 43.8816 8.00186C40.8221 8.00186 38.3419 8.64488 38.3419 9.43808C38.3419 10.2313 40.8221 10.8743 43.8816 10.8743ZM49.4214 3.28255C49.4214 4.07575 46.9411 4.71877 43.8816 4.71877C40.8221 4.71877 38.3419 4.07575 38.3419 3.28255C38.3419 2.48935 40.8221 1.84633 43.8816 1.84633C46.9411 1.84633 49.4214 2.48935 49.4214 3.28255ZM61.732 6.08676C64.7915 6.08676 67.2717 5.44374 67.2717 4.65054C67.2717 3.85733 64.7915 3.21431 61.732 3.21431C58.6725 3.21431 56.1923 3.85733 56.1923 4.65054C56.1923 5.44374 58.6725 6.08676 61.732 6.08676Z" fill="#616161"/>
              <path id="Body" fill-rule="evenodd" clip-rule="evenodd" d="M85.8864 8.03538C85.8528 8.00351 85.8103 7.97236 85.7591 7.94189C86.1595 8.45023 86.368 8.97274 86.368 9.50579C86.368 14.6 67.3223 18.7305 43.8139 18.7386V50.4039C56.897 50.4039 82.8704 48.9609 87.057 35.6656C87.3554 34.8677 87.9453 32.3623 87.9177 28.7238C87.8902 25.0854 87.9063 18.4309 87.9177 15.5584C87.9866 13.7575 87.6767 9.73149 85.8864 8.03538ZM2.02619 8.03532C2.05949 8.00355 2.10158 7.97249 2.1522 7.94211C1.75467 8.45036 1.54761 8.97278 1.54761 9.50574C1.54761 14.5999 20.4643 18.7305 43.8134 18.7386V50.4039C30.819 50.4039 5.02174 48.9608 0.863528 35.6655C0.567165 34.8676 -0.0187228 32.3622 0.0086338 28.7238C0.0359904 25.0853 0.0200324 18.4308 0.0086338 15.5584C-0.0597574 13.7574 0.248005 9.73143 2.02619 8.03532Z" fill="#616161"/>
              <path id="led" fill-rule="evenodd" clip-rule="evenodd" d="M84.9147 10.6006C85.7362 9.7512 86.0838 8.26345 84.4182 6.76855C84.5404 7.01218 84.6028 7.25907 84.6028 7.50872C84.6028 11.7822 66.2925 15.2495 43.6557 15.2741V15.2743C21.3333 15.2462 3.2831 11.7803 3.2831 7.50895C3.2831 7.25991 3.34447 7.0136 3.46447 6.77055C1.82198 8.26513 2.16506 9.75244 2.9755 10.6017C8.44055 15.9276 29.9934 17.4051 43.6901 17.3707V17.3698C57.5717 17.4016 79.3812 15.9221 84.9147 10.6006Z" fill="#00B2FF"/>
            </g>
          </svg>
        `;
      ]]]

icon_lamp:
  styles:
    custom_fields:
      icon:
        - width: 79%
        - margin-left: -16%
  custom_fields:
    icon: >
      [[[
        let state = variables.state_on && variables.timeout < 2000 ? 'on' : null;
        return `
          <svg viewBox="0 0 50 50">
            <style>
              @keyframes on {
                0% {
                  transform: scale(0.85);
                }
                20% {
                  transform: scale(1.1);
                }
                40% {
                  transform: scale(0.95);
                }
                60% {
                  transform: scale(1.03);
                }
                80% {
                  transform: scale(0.97);
                }
              }
              .on {
                animation: on 0.8s;
                transform-origin: center;
              }
            </style>
            <path fill="#9da0a2" d="M26.5 21.8l3.8-6.1H19.7l3.8 6.1c-5 .7-6.3 5.8-5.7 10.2.7 5.1 3.2 10.1 5.7 14.4H19v2.5h11.8v-2.5h-4.5C29 42 31.4 37 32.1 32c.6-4.4-.6-9.4-5.6-10.2zm3.1 9.1c-.3 4.3-2.3 8.7-4.4 12.4l-.2.1v.1-.1c-1.8-3-3.3-6.4-4.1-9.7-.7-3.1-1-7.2 2.7-8.4 1.4-.5 3.1-.1 4.2.8 1.6 1 1.8 3 1.8 4.8z"/>
            <path class="${state}" fill="var(--light-color)" d="M38.1 20L35.7 3.8c-.3-1.9-.4-1.7-.6-2-.9-.6-2.3-.7-2.3-.7H17.4s-1.4 0-2.3.7c-.2.3-.3.1-.6 2C14 5.7 11.9 20 11.9 20s5.8.3 13.4.3h0c7.3 0 12.8-.3 12.8-.3z"/>
          </svg>
        `;
      ]]]

icon_climate:
  styles:
    custom_fields:
      icon:
        - width: 78%
        - margin-left: -10%
        - fill: >
            [[[ return variables.state === 'cool' || variables.state === 'fan_only' ? '#5daeea' : '#9da0a2'; ]]]
  custom_fields:
    icon: >
      <svg viewBox="0 0 50 50">
        <path d="M36.8 1.2v1.7a5.34 5.34 0 0 1-5.3 5.3H18.4a5.34 5.34 0 0 1-5.3-5.3V1.2c-2.6.4-4.7 2.8-4.7 5.6v36.5c0 3.1 2.6 5.7 5.7 5.7h21.8c3.1 0 5.7-2.6 5.7-5.7V6.8c0-2.8-2.1-5.2-4.8-5.6zm-1.7 35.6c-.2 0-.4 0-.5-.1-.4-.1-1.2-.2-2.4-.6-.5-.2-.8-.3-1.2-.4-.3-.1-.7-.3-1.4-.5-1-.4-1.5-.5-1.9-.6-.5-.1-1.1-.2-1.9-.2s-1.4.2-1.9.4c-1 .3-1.8.7-2.1.9l-.6.3a9.75 9.75 0 0 1-1.4.6c-.3.1-.9.3-1.6.3h-.3c-.4 0-1 0-2-.2-.3-.1-.6-.1-.8-.2v-2.7l1.3.3c.5.1 1.3.2 1.7.2.5 0 .9-.2 1.1-.2.4-.1.6-.2 1-.4.2-.1.4-.2.7-.4.4-.2 1.3-.7 2.5-1 .6-.2 1.4-.4 2.5-.5s2 .1 2.5.2c.6.1 1.2.3 2.2.7l1.5.5c.3.1.6.2 1 .4 1 .3 1.8.5 2.1.5h.1v2.7zm0-6c-.2 0-.4 0-.5-.1-.4-.1-1.2-.2-2.4-.6-.5-.2-.8-.3-1.2-.4-.3-.1-.7-.3-1.4-.5-1-.4-1.5-.5-1.9-.6-.5-.1-1.1-.2-1.9-.2s-1.4.2-1.9.4c-1 .3-1.8.7-2.1.9l-.6.3a9.75 9.75 0 0 1-1.4.6c-.3.1-.9.3-1.6.3h-.3c-.4 0-1 0-2-.2-.3-.1-.6-.1-.8-.2v-2.7l1.3.3c.5.1 1.3.2 1.7.2.5 0 .9-.2 1.1-.2.4-.1.6-.2 1-.4.2-.1.4-.2.7-.4.4-.2 1.3-.7 2.5-1 .6-.2 1.4-.4 2.5-.5s2 .1 2.5.2c.6.1 1.2.3 2.2.7l1.5.5c.3.1.6.2 1 .4 1 .3 1.8.5 2.1.5h.1v2.7zm0-6c-.2 0-.4 0-.5-.1-.4-.1-1.2-.2-2.4-.6-.5-.2-.8-.3-1.2-.4-.3-.1-.7-.3-1.4-.5-1-.4-1.5-.5-1.9-.6-.5-.1-1.1-.2-1.9-.2s-1.4.2-1.9.4c-1 .3-1.8.7-2.1.9l-.6.3c-.4.2-.8.4-1.4.6-.3.1-.9.3-1.6.3h-.3c-.4 0-1 0-2-.2-.3-.1-.6-.1-.8-.2v-2.7l1.3.3c.5.1 1.3.2 1.7.2.5 0 .9-.2 1.1-.2.4-.1.6-.2 1-.4.2-.1.4-.2.7-.4.4-.2 1.3-.7 2.5-1 .6-.2 1.4-.4 2.5-.5s2 .1 2.5.2c.6.1 1.2.3 2.2.7l1.5.5c.3.1.6.2 1 .4 1 .3 1.8.5 2.1.5h.1v2.7zM15.7 1.9v-.8h18.6V3c0 1.5-1.2 2.8-2.8 2.8H18.4c-1.5 0-2.8-1.2-2.8-2.8V1.9z"/>
      </svg>

icon_fan2:
  styles:
    custom_fields:
      icon:
        - width: 75%
        - margin-left: -3%
  custom_fields:
    icon: >
      [[[
        let path = `
          <circle cx="25" cy="25" r="6.6"/>
          <path d="M31.9 30.4c-.5.6-1.1 1.1-1.7 1.5-1.4 1.1-3.2 1.7-5.2 1.7-2.3 0-4.5-.9-6-2.4-.9 1.1-1.6 2.3-2.3 3.2l-4.9 5.4c-1.8 2.7.3 5.6 2.5 7 3.9 2.4 9.8 3.1 14.1 1.9 4.6-1.3 7.9-4.7 7.4-9.7-.2-3.4-1.9-6-3.9-8.6zM17 28.3c-.4-1-.6-2.1-.6-3.3a8.7 8.7 0 0 1 6.4-8.4l-1.6-3.5L19 6.2c-1.5-2.8-5-2.5-7.3-1.2-4 2.2-7.5 6.9-8.7 11.3-1.2 4.6.2 9.2 4.7 11.3 3.1 1.3 6.1 1.2 9.3.7zm26.9-17.6c-3.3-3.4-8-4.6-12.1-1.8-2.8 1.8-4.2 4.6-5.5 7.5 4.2.6 7.4 4.2 7.4 8.6 0 .9-.1 1.7-.4 2.5 1.3.2 2.8.3 3.8.4 2.3.4 4.7 1.3 7.1 1.7 3.2.3 4.7-3 4.8-5.6.3-4.6-1.9-10.1-5.1-13.3z"/>
        `,
        style = `
          <svg viewBox="0 0 50 50">
            <style>
              @keyframes rotate {
                0% {
                  visibility: visible;
                  transform: rotate(0deg) translateZ(0);
                }
                100% {
                  transform: rotate(1080deg) translateZ(0);
                }
              }
              .start {
                animation: rotate 2.8s ease-in;
                transform-origin: center;
                fill: #5daeea;
                visibility: hidden;
                will-change: transform;
              }
              .on {
                animation: rotate 1.8s linear infinite;
                transform-origin: center;
                fill: #5daeea;
                animation-delay: 2.8s;
                visibility: hidden;
                will-change: transform;
              }
              .end {
                animation: rotate 2.8s;
                transform-origin: center;
                fill: #9ca2a5;
                animation-timing-function: cubic-bezier(0.61, 1, 0.88, 1);
                will-change: transform;
              }
              .start_timeout {
                animation: rotate 1.8s linear infinite;
                transform-origin: center;
                fill: #5daeea;
                visibility: hidden;
                will-change: transform;
              }
              .end_timeout {
                fill: #9ca2a5;
              }
            </style>
        `;
        if (variables.state_on && variables.timeout < 2000) {
          return `${style}<g class="start">${path}</g><g class="on">${path}</g></svg>`;
        }
        if (variables.state === 'off' && variables.timeout < 2000) {
          return `${style}<g class="end">${path}</g></svg>`;
        }
        if (variables.state_on && variables.timeout > 2000) {
          return `${style}<g class="start_timeout">${path}</g></svg>`;
        } else {
          return `${style}<g class="end_timeout">${path}</g></svg>`;
        }
      ]]]

icon_closet:
  styles:
    custom_fields:
      icon:
        - width: 80%
        - margin-left: -16%
  custom_fields:
    icon: >
      [[[
        let room = `d="M11.4,1.4h27.2v43.1H11.4V1.4z" fill="#bcbcbc"`,
          door = `d="M11.4 1.4v43.1h27.2V1.4H11.4zm23 23.4c0 1.1-.9 1.9-1.9 1.9h0c-1.1 0-1.9-.9-1.9-1.9V21c0-1.1.9-1.9 1.9-1.9h0c1.1 0 1.9.9 1.9 1.9v3.8z"`;

        if (variables.state_on && variables.timeout < 2000) {
          return `
            <style>
              .state {
                animation: state 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              }
              .opacity {
                animation: opacity 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              }
              @keyframes state {
                0% {
                  transform: none;
                  fill: #9da0a2;
                }
                100% {
                  transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                  fill: #b68349;
                }
              }
              @keyframes opacity {
                0% {
                  opacity: 0;
                }
                100% {
                  opacity: 1;
                }
              }
            </style>
            <svg viewBox="0 0 50 50">
              <path class="opacity" ${room}/>
              <path class="state" ${door}/>
            </svg>
          `;
        }

        if (variables.state_on && variables.timeout > 2000) {
          return `
            <svg viewBox="0 0 50 50">
              <style>
                .state_timeout_on {
                  transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                  fill: #b68349;
                }
              </style>
              <path ${room}/>
              <path class="state_timeout_on" ${door}/>
            </svg>
          `;
        }

        return variables.state === 'off' && variables.timeout < 2000 ? `
          <style>
            .state {
              animation: state 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
            }
            .opacity {
              animation: opacity 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
            }
            .reverse {
              animation-direction: reverse;
            }
            @keyframes state {
              0% {
                transform: none;
                fill: #9da0a2;
              }
              100% {
                transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                fill: #b68349;
              }
            }
            @keyframes opacity {
              0% {
                opacity: 0;
              }
              100% {
                opacity: 1;
              }
            }
          </style>
          <svg viewBox="0 0 50 50">
            <path class="opacity reverse" ${room}/>
            <path class="state reverse" ${door}/>
          </svg>
        ` : `
          <svg viewBox="0 0 50 50">
            <style>
              .state_timeout_off {
                fill: var(--state-icon-color);
              }
            </style>
            <path class="state_timeout_off" ${door}/>
          </svg>
        `;
      ]]]

icon_away:
  state_display: Auto
  styles:
    card:
      - transition: all 0.3s ease-out
    custom_fields:
      icon:
        - width: 79%
        - margin-left: -1%
        - margin-top: -1%
        - fill: >
            [[[ return variables.state_on ? '#516d82' : '#9da0a2'; ]]]
  custom_fields:
    icon: >
      [[[
        let state = variables.state_on ? 'on' : null;
        return `
          <svg viewBox="0 0 50 50">
            <style>
              @keyframes on {
                10%,
                20%,
                100% {
                  transform: rotateZ(0deg);
                }
                30%,
                50%,
                70% {
                  transform: rotateZ(7deg);
                }
                90% {
                  transform: rotateZ(3deg);
                }
                40%,
                60%,
                80% {
                  transform: rotateZ(-7deg);
                }
              }
              .on {
                animation: on 1.35s cubic-bezier(0.5, 1, 0.89, 1);
                animation-fill-mode: both;
                transform-origin: 70% 80%;
                animation-delay: 0s;
              }
            </style>
            <path class="${state}" d="M32.1 18.4s.3-1.6.7-2.1c.3-.6.9-1.4 1.6-1.8.6-.4 1.1-.7 1.4-.7s.7-.1 1 .1.6.4.8 1.3l.3 2.7.1 2.4.2 4.1c0 .3.2 3.1.2 3.3s.2 2.7.2 3.2l-.1 2.5c.1 1.6.5 3.1-.2 4.6-.6 1.4-1.7 2.7-2.9 3.6-.5.4-1.9 1.3-2.9 1.7-1.1.5-2.2.8-3.3 1.1-.5.1-1.4.4-2.3.3s-1.8-.6-2.1-1l-1.6-2.3c-.6-.8-2.1-2.3-2.3-2.5l-2.7-2.8c-.2-.2-2.7-3.5-2.9-3.8l-3.1-4.7-1.8-3.2-1.5-2.8-.9-1.8c-.1-.2-.3-1.1-.2-1.4.3-1.2 1.4-1.4 2.3-.7.3.2.9 1 1.1 1.3s6.1 8.1 6.1 8.1c.2.3.7.3.9 0s-.1-.7-.2-.9c-.4-.6-8.3-11.5-8.3-11.5s-.6-.9-.7-1.1c-.3-1.1 0-2.3 1.1-2.7s1.9.3 2.6 1.1c.3.3 8.3 11.5 8.3 11.5.2.2.3.3.5.3.3 0 .5-.4.4-.7-.1-.2-.5-.9-.5-.9L11.8 9c-.6-1-.9-2-.1-3 .7-.8 2.2-1.3 3-.2.3.3 10.1 14.3 10.1 14.3.2.2.5.4.7.3.5-.1.3-.7.1-1-.1-.2-8.4-11.8-8.4-11.8-.4-.9-.6-2 .2-2.8 1-1.1 2.5-.5 3.3.5.2.3 1 1.4 1 1.4l2.7 3.7c.1.2 3.4 4.4 3.8 4.8.9 1.1 1.8 2.2 2.7 3.2l.5.5c.1.1.1.4.1.8 0 1.3.1 2.6.1 3.9 0 .2.1.4.2.6.3.3.6.1.7-.2.1-.2 0-2.4 0-2.7-.3-.3-.5-1.3-.4-2.9zM12.2 46.9s-2.8-.8-4.8-2.7-2.6-2.7-2.8-3-1.8-3-2-3.6c-.2-.5-.2-.7.2-1 .4-.4 1-.5 1.3.1.1.2.4 1 .5 1.2s1 1.9 1.7 2.8 1.6 2.2 4.4 3.8c.6.3 1.2.6 1.9.9.3.1.6.2.8.4.1.2.1.6-.1.8-.2.4-.7.4-1.1.3zM7.1 30.7l.9 3.1c.3.7 1.1 2.3 1.9 3.3s2.4 2.6 3.4 3.2 2 1.1 3 1.5c1 .3 1.1.4 1.2.5.3.4.2 1.2-.4 1.3-.2 0-1.2 0-1.8-.3L12 41.7c-.5-.4-3.9-3.1-5.1-6S5.3 31 5.2 30.4s-.2-1.1 0-1.4c.3-.4.9-.8 1.3-.3.2.3.3.6.3.9.1 0 .2.8.3 1.1zm26.8-25s.2-.1.5-.1.8.3 1.4.7 1.9 1 3.6 2.9 2.9 3.9 3.4 5.8c.5 1.8.8 3.1.9 5.5 0 .5.1 1.6 0 1.7-.2.5-.5.7-1 .7-.6 0-.7-.5-.7-1l-.1-2.9c-.1-.6-.3-1.9-.7-2.9-.3-1-.7-2.3-1.7-3.6-.9-1.3-2.1-2.8-3.2-3.5l-2.4-1.5c-.6-.6-.7-1.2 0-1.8zm4.9-2.5s.3-.2.5-.1c.2 0 .7.3.9.4s2.1 1.3 3.6 3c1.5 1.6 3.5 5.1 3.7 7.4.1.4.2.9 0 1-.2.2-.4.4-.7.4-.2 0-.5 0-.7-.1-.1-.2-.4-1.1-.4-1.3s-.6-2-1.1-3.1C44 9.7 43.5 8.5 42 7.1s-2.2-1.9-2.8-2.2-1.1-.6-1.1-1c.1-.3.3-.6.7-.7z"/>
          </svg>
        `;
      ]]]

icon_home:
  state_display: Auto
  styles:
    card:
      - transition: all 0.3s ease-out
    custom_fields:
      icon:
        - width: 72%
        - margin-left: -1%
        - fill: >
            [[[ return variables.state_on ? '#c7983e' : '#9da0a2'; ]]]
  custom_fields:
    icon: >
      [[[
        let state = variables.state_on ? 'on' : null;
        return `
          <svg viewBox="0 0 50 50">
            <style>
              @keyframes on {
                from,
                20%,
                40%,
                60%,
                80%,
                to {
                  animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
                }
                0% {
                  transform: scale(0.3);
                }
                20% {
                  transform: scale(1.1);
                }
                40% {
                  transform: scale(0.9);
                }
                60% {
                  transform: scale(1.03);
                }
                80% {
                  transform: scale(0.97);
                }
                to {
                  transform: scale(1);
                }
              }
              .on {
                animation: on 1s;
                transform-origin: center;
              }
            </style>
            <path class="${state}" d="M42.2 28.3c0-.8-.2-1-.2-1L26 12.1s-.5-.4-1-.4-1 .3-1 .3L8.2 27.1c-.4.5-.4.9-.4.9v18.3c0 1.1.9 2 1.9 2h8.2a1.47 1.47 0 0 0 1.5-1.5v-14a1.47 1.47 0 0 1 1.5-1.5h8.4a1.47 1.47 0 0 1 1.5 1.5v14a1.47 1.47 0 0 0 1.5 1.5h8.2c1.1 0 2-.9 2-1.9 0-.2-.3-18.1-.3-18.1zM7.3 25l-1.6 1.5s-.3.3-.5.3-.5 0-.8-.2c-.2-.2-2-2.8-2-2.8s-.1-.4-.1-.7c.1-.3.2-.7.3-.8.4-.1 21.5-20.1 21.5-20.1s.4-.3.9-.3c.4 0 .8.1.9.2s.5.4.5.4l8.9 8.5V6s.1-.4.2-.7c.1-.2.3-.3.4-.3s.3-.1.3-.1h3s.3.1.4.3a1.08 1.08 0 0 1 .3.7v9.8l7.2 6.9s.2.3.3.4c.1.2.1.7.1.7 0 .1-.1.4-.2.5s-1.6 2.5-1.6 2.5-.1.3-.3.3c-.2.1-.4.1-.7 0-.2-.1-.5-.4-.5-.4L26.4 9.4s-.3-.3-.5-.4-.4-.2-.8-.2-.5.1-.8.1c-.1.1-.4.3-.7.5C23.3 9.8 7.3 25 7.3 25z"/>
          </svg>
        `;
      ]]]
