- title: Mining
  path: mining
  cards:
    - type: custom:mini-graph-card
      icon: mdi:currency-usd
      decimals: 2
      points_per_hour: 12
      hours_to_show: 12
      line_width: 3
      smoothing: true
      animate: true
      update_interval: 5
      tap_action: none
      average: true
      color_thresholds_transition: smooth
      color_thresholds:
        - value: 110000
          color: "#34eb8c"
        - value: 108000
          color: "#ebd934"
        - value: 105000
          color: "#eb3434"
      show:
        labels: false
        labels_secondary: false
        legend: false
        fill: true
        name_adaptive_color: true
        icon_adaptive_color: true
      entities:
        - sensor.btc_price
      style: |
        ha-card { 
          background: #00000020;
          border-radius: 12px
        }

    - type: entity
      title: BTC Balance Unpaid / Paid
      entity: sensor.nicehash_available_account_balance
      tap_action: none
      hold_action: none
      icon: mdi:currency-usd
      style: |
        ha-card { 
          background: #00000020;
          border-radius: 12px
        }

    # - type: entity
    #   title: BTC Balance Unpaid / Paid
    #   state: >-
    #     {{ (states('sensor.nh_mining_unpaidamount_brl')| float |round(2)) }}R$ /
    #     {{ (states('sensor.nh_mining_totalbalance_brl')| float |round(2)) }}R$
    #   tap_action: none
    #   hold_action: none
    #   icon: mdi:currency-brl
    #   style: |
    #     ha-card {
    #       background: #00000020;
    #       border-radius: 12px
    #     }

    - type: custom:mini-graph-card
      decimals: 2
      smoothing: true
      animate: true
      update_interval: 5
      tap_action: none
      points_per_hour: 2
      hours_to_show: 24
      line_width: 3
      show:
        labels: false
        labels_secondary: false
        legend: false
        fill: true
      entities:
        - sensor.nh_mining_totalprofitability_brl
      style: |
        ha-card { 
          background: #00000020;
          border-radius: 12px
        }

    - type: custom:mini-graph-card
      decimals: 2
      show:
        graph: bar
      entities:
        - entity: sensor.nh_setup_daggerhashimoto_speedaccepted
          name: SETUP
      style: |
        ha-card { 
          background: #00000020;
          border-radius: 12px
        }

    # - type: custom:button-card
    #   entity: sensor.btc_price
    #   name: Sensor
    #   state_display: >
    #     [[[ return '&nbsp;'; ]]]
    #   template:
    #     - base
    #     - circle
    #     - icon_climate
    #   custom_fields:
    #     icon: >
    #       <ha-icon icon="mdi:thermometer" style="color: #9da0a2;"></ha-icon>
    #     circle: >
    #       [[[
    #         if (entity) {
    #           return `
    #             <svg viewBox="0 0 50 50">
    #               <circle cx="25" cy="25" r="20.5" stroke="none" stroke-width="1.5" fill="rgba(255,255,255,0.04)" />
    #               <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${parseInt(entity.state)}<tspan font-size="10">Â°C</tspan></text>
    #             </svg>
    #           `;
    #         }
    #       ]]]
    #     graph:
    #       card:
    #         type: sensor
    #         entity: >
    #           [[[ return entity.entity_id; ]]]
    #         graph: line
    #         card_mod:
    #           style: |
    #             .header, .value, .measurement {
    #               display: none !important;
    #             }
    #     push_graph: >
    #       [[[
    #         setTimeout(() => {
    #           let elt = this.shadowRoot,
    #             card = elt.getElementById('card'),
    #             container = elt.getElementById('container'),
    #             graph = elt.getElementById('graph');

    #           if (elt && card && container && graph) {
    #             card.insertBefore(graph, container);
    #           }
    #         }, 0);
    #         return null;
    #       ]]]
    #   styles:
    #     custom_fields:
    #       graph:
    #         - position: absolute
    #         - width: 100%
    #         - height: 100%
    #         - clip-path: inset(0 round var(--custom-button-card-border-radius))
    #         - left: 0
    #         - bottom: 0
