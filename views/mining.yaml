- title: Mining
  path: mining
  cards:
    - type: custom:mini-graph-card
      icon: mdi:currency-usd
      decimals: 2
      points_per_hour: 12
      hours_to_show: 12
      line_width: 3
      smoothing: true
      animate: true
      update_interval: 5
      tap_action: none
      average: true
      color_thresholds_transition: smooth
      color_thresholds:
        - value: "{{ states('sensor.average_btc') | float }}"
          color: "#34eb8c"
        - value: 103000
          color: "#ebd934"
        - value: 102000
          color: "#eb3434"
      show:
        labels: false
        labels_secondary: false
        legend: false
        fill: true
        name_adaptive_color: true
        icon_adaptive_color: true
      entities:
        - sensor.btc_price
      style: |
        ha-card { 
          background: #00000020;
          border-radius: 12px
        }

    - type: entity
      title: Nicehash account balance
      entity: sensor.nicehash_available_account_balance_usd
      tap_action: none
      hold_action: none
      icon: mdi:currency-usd
      style: |
        ha-card { 
          background: #00000020;
          border-radius: 12px
        }

    - type: custom:mini-graph-card
      decimals: 8
      smoothing: true
      animate: true
      update_interval: 5
      tap_action: none
      points_per_hour: 2
      hours_to_show: 24
      line_width: 3
      show:
        labels: false
        labels_secondary: false
        legend: false
        fill: true
      entities:
        - sensor.setup_profitability
      style: |
        ha-card { 
          background: #00000020;
          border-radius: 12px
        }

    - type: custom:mini-graph-card
      decimals: 8
      show:
        graph: bar
      entities:
        - sensor.nicehash_recent_mining_payout
      style: |
        ha-card { 
          background: #00000020;
          border-radius: 12px
        }

    - type: custom:mini-graph-card
      decimals: 2
      show:
        graph: bar
      entities:
        - entity: sensor.setup_speed
          name: SETUP
        - entity: sensor.geforce_rtx_3060_speed
          name: RTX 3060
        - entity: sensor.geforce_gtx_1660_speed
          name: GTX 1660
      style: |
        ha-card { 
          background: #00000020;
          border-radius: 12px
        }

    # - type: custom:button-card
    #   view_layout:
    #     grid-area: seven
    #   template:
    #     - widgets
    #   name: BATTERIER
    #   styles:
    #     name:
    #       - font-size: 14px
    #       - font-weight: bold
    #       - top: 20px
    #       - left: 20px
    #       - position: absolute
    #     custom_fields:
    #       iphonese:
    #         - top: 40px
    #         - left: '-5px'
    #         - width: 110%
    #         - border-bottom: 1px solid rgb(255,255,255,0.1)
    #         - padding: 10px
    #         - position: absolute
    #         - font-size: 16px
    #         - text-shadow: 0px 0px 1px black
    #       iphonesebattery:
    #         - top: 60px
    #         - right: 15px
    #         - position: absolute
    #         - font-size: 14px
    #       iphone11:
    #         - top: 100px
    #         - left: '-5px'
    #         - width: 110%
    #         - border-bottom: 1px solid rgb(255,255,255,0.1)
    #         - padding: 10px
    #         - position: absolute
    #         - font-size: 16px
    #         - text-shadow: 0px 0px 1px black
    #       iphone11battery:
    #         - top: 120px
    #         - right: 15px
    #         - position: absolute
    #         - font-size: 14px
    #       ipad:
    #         - top: 160px
    #         - left: '-5px'
    #         - width: 110%
    #         - padding: 10px
    #         - position: absolute
    #         - font-size: 16px
    #         - text-shadow: 0px 0px 1px black
    #       ipadbattery:
    #         - top: 180px
    #         - right: 15px
    #         - position: absolute
    #         - font-size: 14px
    #   custom_fields:
    #     iphonese: |
    #       [[[
    #             return `<div align="left"> <ha-icon
    #               icon="mdi:cellphone"
    #               style="width: 20px; height: 20px; color:grey; padding: 10px;">
    #               </ha-icon>iPhone SE</div>`
    #           ]]]
    #     iphonesebattery: |
    #       [[[
    #         if (states["sensor.iphone_battery_level"].state > 40) {
    #           let input = states["sensor.iphone_battery_level"].state / 3,
    #             state = states["sensor.iphone_battery_level"].state,
    #             color = '#08ff4e';
    #           return `
    #             <svg width="86" height="24">
    #               <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
    #               <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
    #               <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
    #           `;
    #         } if (states["sensor.iphone_battery_level"].state > 15) {
    #           let input = states["sensor.iphone_battery_level"].state / 3,
    #             state = states["sensor.iphone_battery_level"].state,
    #             color = 'orange';
    #           return `
    #             <svg width="86" height="24">
    #               <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
    #               <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
    #               <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
    #           `;
    #         } else {
    #           let state = states["sensor.iphone_battery_level"].state,
    #             color = 'red';
    #           return `
    #             <svg width="86" height="24">
    #               <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
    #               <rect x="43" y="4" rx="3" ry="3" width="5" height="12" fill="${color}" stroke-width="0"/>
    #               <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
    #           `;
    #         }
    #       ]]]
    #     iphone11: |
    #       [[[
    #             return `<div align="left"> <ha-icon
    #               icon="mdi:cellphone"
    #               style="width: 20px; height: 20px; color:grey; padding: 10px;">
    #               </ha-icon>iPhone 11</div>`
    #           ]]]
    #     iphone11battery: |
    #       [[[
    #         if (states["sensor.malins_iphone_battery_level"].state > 40) {
    #           let input = states["sensor.malins_iphone_battery_level"].state / 3,
    #             state = states["sensor.malins_iphone_battery_level"].state,
    #             color = '#08ff4e';
    #           return `
    #             <svg width="86" height="24">
    #               <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
    #               <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
    #               <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
    #           `;
    #         } if (states["sensor.malins_iphone_battery_level"].state > 15) {
    #           let input = states["sensor.malins_iphone_battery_level"].state / 3,
    #             state = states["sensor.malins_iphone_battery_level"].state,
    #             color = 'orange';
    #           return `
    #             <svg width="86" height="24">
    #               <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
    #               <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
    #               <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>

    #           `;
    #         } else {
    #           let state = states["sensor.malins_iphone_battery_level"].state,
    #             color = 'red';
    #           return `
    #             <svg width="86" height="24">
    #               <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
    #               <rect x="43" y="4" rx="3" ry="3" width="5" height="12" fill="${color}" stroke-width="0"/>
    #               <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
    #           `;
    #         }
    #       ]]]
    #     ipad: |
    #       [[[
    #             return `<div align="left"> <ha-icon
    #               icon="mdi:tablet-android"
    #               style="width: 20px; height: 20px; color:grey; padding: 10px;">
    #               </ha-icon>iPad Pro</div>`
    #           ]]]
    #     ipadbattery: |
    #       [[[
    #         if (states["sensor.daniels_ipad_battery_level"].state > 40) {
    #           let input = states["sensor.daniels_ipad_battery_level"].state / 3,
    #             state = states["sensor.daniels_ipad_battery_level"].state,
    #             color = '#08ff4e';
    #           return `
    #             <svg width="86" height="24">
    #               <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
    #               <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
    #               <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
    #           `;
    #         } if (states["sensor.daniels_ipad_battery_level"].state > 15) {
    #           let input = states["sensor.daniels_ipad_battery_level"].state / 3,
    #             state = states["sensor.daniels_ipad_battery_level"].state,
    #             color = 'orange';
    #           return `
    #             <svg width="86" height="24">
    #               <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
    #               <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
    #               <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
    #           `;
    #         } else {
    #           let state = states["sensor.daniels_ipad_battery_level"].state,
    #             color = 'red';
    #           return `
    #             <svg width="86" height="24">
    #               <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
    #               <rect x="43" y="4" rx="3" ry="3" width="5" height="12" fill="${color}" stroke-width="0"/>
    #               <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
    #           `;
    #         }
    #       ]]]

    # - type: custom:button-card
    #   entity: sensor.btc_price
    #   name: Sensor
    #   state_display: >
    #     [[[ return '&nbsp;'; ]]]
    #   template:
    #     - base
    #     - circle
    #     - icon_climate
    #   custom_fields:
    #     icon: >
    #       <ha-icon icon="mdi:thermometer" style="color: #9da0a2;"></ha-icon>
    #     circle: >
    #       [[[
    #         if (entity) {
    #           return `
    #             <svg viewBox="0 0 50 50">
    #               <circle cx="25" cy="25" r="20.5" stroke="none" stroke-width="1.5" fill="rgba(255,255,255,0.04)" />
    #               <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${parseInt(entity.state)}<tspan font-size="10">°C</tspan></text>
    #             </svg>
    #           `;
    #         }
    #       ]]]
    #     graph:
    #       card:
    #         type: sensor
    #         entity: >
    #           [[[ return entity.entity_id; ]]]
    #         graph: line
    #         card_mod:
    #           style: |
    #             .header, .value, .measurement {
    #               display: none !important;
    #             }
    #     push_graph: >
    #       [[[
    #         setTimeout(() => {
    #           let elt = this.shadowRoot,
    #             card = elt.getElementById('card'),
    #             container = elt.getElementById('container'),
    #             graph = elt.getElementById('graph');

    #           if (elt && card && container && graph) {
    #             card.insertBefore(graph, container);
    #           }
    #         }, 0);
    #         return null;
    #       ]]]
    #   styles:
    #     custom_fields:
    #       graph:
    #         - position: absolute
    #         - width: 100%
    #         - height: 100%
    #         - clip-path: inset(0 round var(--custom-button-card-border-radius))
    #         - left: 0
    #         - bottom: 0
